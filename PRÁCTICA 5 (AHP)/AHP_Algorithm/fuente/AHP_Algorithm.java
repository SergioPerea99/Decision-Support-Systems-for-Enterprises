/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ahp_algorithm;


import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.math3.linear.EigenDecomposition;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;

/**
 *
 * @author Sergio
 */
public class AHP_Algorithm extends javax.swing.JFrame {
    
    //ATRIBUTOS
    private AHP_Interface interfaz;
    private ArrayList<String> alternativas, criterios;
    private ArrayList<ArrayList<Double>> matriz_c_c, matriz_a_c;
    private ArrayList<ArrayList<ArrayList<Double>>> vector_matrices_a_c;
    private Integer contador_pasos;
    private ArrayList<Double> pesosCriterios;
    private Double CI, CR;
    private ArrayList<Double> v_CI, v_CR;
    private RealVector autoVector;
    private Double[] CR_SAATY = {0.58, 0.9, 1.12, 1.24, 1.32, 1.41, 1.45, 1.49}; 
    private Boolean ComparadosCriterios = false;
    
    //ATRIBUTO FINAL
    private ArrayList<String> ranking_alternativas;
    
    /**
     * Creates new form AHP_Algorithm
     */
    public AHP_Algorithm() {
        matriz_a_c =  new ArrayList<>();
        matriz_c_c = new ArrayList<>();
        vector_matrices_a_c = new ArrayList<ArrayList<ArrayList<Double>>>();
        pesosCriterios = new ArrayList<>();
        ranking_alternativas = new ArrayList<>();
        contador_pasos = 0;
        CR = CI = -1.0;
        v_CI = new ArrayList<>();
        v_CR = new ArrayList<>();
        
        initComponents();
        jTable1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(final MouseEvent e) {
                if (e.getClickCount() == 1) {
                    jTable1 = (JTable) e.getSource();
                    final int fila = jTable1.getSelectedRow();
                    final int columna = jTable1.getSelectedColumn();

                    final String urObjctInCell = (String) jTable1.getValueAt(fila, columna);
                    
                    if (jTable1.getValueAt(fila, columna) == null && jTable1.getValueAt(columna - 1, fila + 1) != null)
                        jTable1.setValueAt("1/" + jTable1.getValueAt(columna - 1, fila + 1), fila, columna);
                    
                }
            }
        }
        );
    }
    
    public void setAHP(AHP_Interface _interfaz, ArrayList<String> _alternativas, ArrayList<String> _criterios){
        interfaz = _interfaz;
        alternativas = _alternativas;
        criterios = _criterios;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        SIGUIENTE = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        SIGUIENTE.setText("SIGUIENTE");
        SIGUIENTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SIGUIENTEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .addComponent(SIGUIENTE, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SIGUIENTE, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SIGUIENTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SIGUIENTEActionPerformed
        // TODO add your handling code here:
        
        if (contador_pasos == 0){ //SE TIENE QUE RELLENAR LA MATRIZ DE COMPARACIÓN DE CRITERIOS
            v_CR.clear();
            ObtenerMatriz(matriz_c_c, criterios.size(), criterios.size());
            
            //Una vez termina de obtener la matriz, calcula el Wj.
            pesosCriterios = calcula_pesos_CI_CR(matriz_c_c,matriz_c_c.size(), matriz_c_c.size());
            generarMatriz(false, criterios.get(contador_pasos));
            contador_pasos++;
        }
        
        if (contador_pasos > 1){ //SE TIENE QUE RELLENAR EN BUCLE LAS MATRICES DE COMPARACIÓN DE TODAS LAS ALTERNATIVAS RESPECTO A UN CRITERIO
            matriz_a_c.clear();
            ObtenerMatriz(matriz_a_c, alternativas.size(), alternativas.size());
            vector_matrices_a_c.add((ArrayList<ArrayList<Double>>) matriz_a_c.clone());
            pesosCriterios = calcula_pesos_CI_CR(matriz_a_c,matriz_a_c.size(), matriz_a_c.size());
            
            if (contador_pasos <= criterios.size())
                generarMatriz(false, criterios.get(contador_pasos-1)); //SEGUIMOS AÑADIENDO RELACIONES DE PREFERENCIA ENTRE ALTERNATIVAS PARA UN CRITERIO...
            else{
                //YA SE HA TERMINADO TODAS LAS MATRICES A RELLENAR...TOCA CALCULAR 
                System.out.println("NºMatrices de comparaciones de alternativas resp. criterios : "+vector_matrices_a_c.size());
                System.out.println(vector_matrices_a_c);
                interfaz.set_visibilidad_relaciones(false);
                interfaz.setVisible(true);
                dispose();
                
            }
            contador_pasos++;          
        }
        
        else //PARA REAJUSTAR AL RITMO QUE SE HACE CLICK EN EL BUTTON.
            contador_pasos++;
    }//GEN-LAST:event_SIGUIENTEActionPerformed
    
    private void ObtenerMatriz(ArrayList<ArrayList<Double>> matriz, int filas, int columnas){
        ArrayList<Double> vector_aux = new ArrayList<>();
        Double a;
        for (int i = 0; i < filas; i++) {
            vector_aux = new ArrayList<>();
            for (int j = 1; j < columnas + 1; j++) {
                String e = jTable1.getValueAt(i, j).toString();
                if (e.contains("/")) {
                    String[] spl = e.split("/");
                    if (spl.length == 2){
                        Double n1 = Double.parseDouble(spl[0]);
                        Double n2 = Double.parseDouble(spl[1]);
                        a = (n1 / n2);
                    }else{
                        Double n1 = Double.parseDouble(spl[0]);
                        Double n2 = Double.parseDouble(spl[1]);
                        Double n3 = Double.parseDouble(spl[2]);
                        a = (n1 / (n2 / n3) );
                    }
                } 
                else
                    a = Double.parseDouble(e);
                vector_aux.add(a);
            }
           matriz.add(vector_aux);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AHP_Algorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AHP_Algorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AHP_Algorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AHP_Algorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AHP_Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SIGUIENTE;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    public void generarMatriz(boolean compara_criterios, String nombre_tabla) {
        
        if (compara_criterios) { //Comprobar si es para generar la matriz de comparación entre criterios.
            DefaultTableModel tabla_auxiliar = new DefaultTableModel();
            tabla_auxiliar.addColumn(nombre_tabla);

            for (int i = 0; i < criterios.size(); i++)
                tabla_auxiliar.addColumn(criterios.get(i));
            
            for (int i = 0; i < criterios.size(); i++) {
                tabla_auxiliar.addRow(new Object[criterios.size()]);
                tabla_auxiliar.setValueAt(criterios.get(i), i, 0);
            }
            for (int i = 0; i < tabla_auxiliar.getRowCount(); i++) {
                for (int j = 0; j < tabla_auxiliar.getColumnCount(); j++) {
                    if (i == j) {
                        tabla_auxiliar.setValueAt(1, i, j + 1);
                    }
                }
            }
            jTable1.setModel(tabla_auxiliar);
        } else { //Matriz de alternativas por cada uno de los criterios.
            
            DefaultTableModel tabla_auxiliar = new DefaultTableModel();
            tabla_auxiliar.addColumn(nombre_tabla);

            for (int i = 0; i < alternativas.size(); i++)
                tabla_auxiliar.addColumn(alternativas.get(i));
            
            for (int i = 0; i < alternativas.size(); i++) {
                tabla_auxiliar.addRow(new Object[alternativas.size()]);
                tabla_auxiliar.setValueAt(alternativas.get(i), i, 0);
            }
            for (int i = 0; i < tabla_auxiliar.getRowCount(); i++) {
                for (int j = 0; j < tabla_auxiliar.getColumnCount(); j++) {
                    if (i == j) {
                        tabla_auxiliar.setValueAt(1, i, j + 1);
                    }
                }
            }
            jTable1.setModel(tabla_auxiliar);
        }

    }
    
    public ArrayList<Double> getV_CR() {
        return v_CR;
    }
    
    public ArrayList<Double> getV_CI(){
        return v_CI;
    }
    
    private ArrayList<Double> calcula_pesos_CI_CR(ArrayList<ArrayList<Double>> matriz,int n_filas, int n_columnas){
    
        //OBTENER LOS AUTOVALORES DE LA MATRIZ.
        double[][] values = new double[n_filas][n_columnas];
        
        for (int i = 0; i < n_filas; i++)
            for (int j = 0; j < n_columnas; j++)
                values[i][j] = matriz.get(i).get(j);

        RealMatrix matrix = MatrixUtils.createRealMatrix(values);
        EigenDecomposition descomposition = new EigenDecomposition(matrix);
        double[] eigenValues = descomposition.getRealEigenvalues(); //Obtenemos los autovalores
        
        //CALCULAR CUÁL ES EL MÁXIMO AUTOVALOR.
        double maxAutoValor = -1.0;
        int indice_AV_max = -1;
        for (int i = 0; i < eigenValues.length; i++) {
            if (maxAutoValor < eigenValues[i]) {
                maxAutoValor = eigenValues[i];
                indice_AV_max = i;
            }
        }
        
        //AHORA SE OBTIENE EL ÍNDICE DE CONSISTENCIA, TRAS HABER OBTENIDO EL MÁXIMO AUTOVALOR.
        CI = (maxAutoValor - matriz.size()) / (matriz.size() - 1); //Fórmula del CI.
        
        
        //OBTENER EL AUTOVECTOR, A PARTIR DEL AUTOVALOR MÁXIMO OBTENIDO.
        autoVector = descomposition.getEigenvector(indice_AV_max);
        double[] _autoVector = autoVector.toArray();
        ArrayList<Double> vector_pesos = new ArrayList<>();
        for (int i = 0; i < _autoVector.length; i++) 
            vector_pesos.add(_autoVector[i]);
        //NORMALIZAR EL AUTOVECTOR. --> NO HABRÍA PORQUÉ NORMALIZARLO.
        ArrayList<Double> v_pesos_norm = normalizarPesos(vector_pesos);
        
        if (matriz.size() >= 3)
            CR = CI / CR_SAATY[matriz.size() - 3]; //SI ES MENOR QUE 3 --> NO PUEDE EXISTIR INCONSISTENCIA.
        
        v_CI.add(CI);
        v_CR.add(CR);
        return v_pesos_norm; //DEVOLVER EL VECTOR DE PESOS NORMALIZADOS.
    }
    
    private ArrayList<Double> normalizarPesos(ArrayList<Double> v_pesos) {
        Double sum = 0.0;
        for (int i = 0; i < v_pesos.size(); i++)
            sum += v_pesos.get(i);
        
        for (int i = 0; i < v_pesos.size(); i++)
            v_pesos.set(i, v_pesos.get(i) / sum);
        
        return v_pesos;
    }
    
    public void metodo_aproximacion(){
        
        //VARIABLES DE USO GENERAL.
        Double suma_pesos;
        
        //1. CALCULAR LOS PESOS Y NORMALIZARLOS PARA MATRIZ DE COMPARACIÓN ENTRE CRITERIOS.
        ArrayList<Double> v_pesos_c_c = new ArrayList<>();
        for (int i = 0; i < matriz_c_c.size(); i++) {
            suma_pesos = 0.0;
            for (int j = 0; j < matriz_c_c.size(); j++) //Para cada fila, se suma los pesos de toda las columnas.
                suma_pesos += matriz_c_c.get(i).get(j);
            v_pesos_c_c.add(suma_pesos); //Se añade esa suma de pesos al vector de pesos.
        }
        ArrayList<Double> v_pesos_norm_c_c = normalizarPesos(v_pesos_c_c);
        
        //2. CALCULAR LOS PESOS Y NORMALIZARLOS PARA MATRICES DE COMPARACIÓN DE ALTERNATIVAS PARA CADA CRITERIO.
        ArrayList<ArrayList<Double>> matriz_pesos_norm_a_c = new ArrayList<>();
        ArrayList<Double> v_pesos_a_c, v_pesos_norm_a_c;
        for (int a = 0; a < alternativas.size(); a++) {
            v_pesos_a_c= new ArrayList<>();
            for (int c = 0; c < criterios.size(); c++) {
                suma_pesos = 0.0;
                for (int j = 0; j < alternativas.size(); j++)
                    suma_pesos += vector_matrices_a_c.get(c).get(a).get(j);
                
                v_pesos_a_c.add(suma_pesos);
            }
            v_pesos_norm_a_c = normalizarPesos(v_pesos_a_c);
            matriz_pesos_norm_a_c.add(v_pesos_norm_a_c);
        }
        
        //3.CÁLCULO DEL RANKING A PARTIR DEL MÉTODO DE APROXIMACIÓN.
        obtenerRanking(v_pesos_norm_c_c, matriz_pesos_norm_a_c, false);
    }
    
    public void metodo_mediaGeometrica(){
        
        //VARIABLES DE USO GENERAL.
        Double producto_pesos;
        
        //1. CALCULAR LOS PESOS Y NORMALIZARLOS PARA MATRIZ DE COMPARACIÓN ENTRE CRITERIOS.
        ArrayList<Double> v_pesos_c_c = new ArrayList<>();
        for (int i = 0; i < criterios.size(); i++) {
            producto_pesos = 1.0;
            for (int j = 0; j < criterios.size(); j++) //Para cada fila, se suma los pesos de toda las columnas.
                producto_pesos *= matriz_c_c.get(i).get(j);
            producto_pesos = (double) Math.pow(producto_pesos, ((double) 1 / (double)criterios.size())); //Aplicamos la raiz n-ésima, siendo n = nºcriterios.
            v_pesos_c_c.add(producto_pesos); //Se añade al vector de pesos.
        }
        ArrayList<Double> v_pesos_norm_c_c = normalizarPesos(v_pesos_c_c);
        
        //2. CALCULAR LOS PESOS Y NORMALIZARLOS PARA MATRICES DE COMPARACIÓN DE ALTERNATIVAS PARA CADA CRITERIO.
        ArrayList<ArrayList<Double>> matriz_pesos_norm_a_c = new ArrayList<>();
        ArrayList<Double> v_pesos_a_c, v_pesos_norm_a_c;
        for (int a = 0; a < alternativas.size(); a++) {
            v_pesos_a_c= new ArrayList<>();
            for (int c = 0; c < criterios.size(); c++) {
                producto_pesos = 1.0;
                for (int j = 0; j < alternativas.size(); j++)
                    producto_pesos *= vector_matrices_a_c.get(c).get(a).get(j);
                producto_pesos = (double) Math.pow(producto_pesos, (double)(1.0 / alternativas.size())); //Aplicamos la raiz n-ésima, siendo n = nºalternativas.
                v_pesos_a_c.add(producto_pesos);
            }
            v_pesos_norm_a_c = normalizarPesos(v_pesos_a_c);
            matriz_pesos_norm_a_c.add(v_pesos_norm_a_c);
        }
        
        //3.CÁLCULO DEL RANKING A PARTIR DEL MÉTODO DE APROXIMACIÓN.
        obtenerRanking(v_pesos_norm_c_c, matriz_pesos_norm_a_c, false);
    }
    
    public void metodo_autoValor(){
        ArrayList<Double> v_pesos_c_c = calcula_pesos_CI_CR(matriz_c_c,matriz_c_c.size(), matriz_c_c.size());
        ArrayList<ArrayList<Double>> matriz_pesos_norm_a_c = new ArrayList<>();
        for (int i = 0; i < criterios.size(); i++)
            matriz_pesos_norm_a_c.add(calcula_pesos_CI_CR(vector_matrices_a_c.get(i), alternativas.size(), alternativas.size()));
        obtenerRanking(v_pesos_c_c, matriz_pesos_norm_a_c, true);
    }
    
    private void obtenerRanking(ArrayList<Double> v_pesos_norm_c_c, ArrayList<ArrayList<Double>> matriz_pesos_norm_a_c, Boolean metodo_autovalor) {
        ranking_alternativas.clear();
        ArrayList<Double> ranking_alternativas = new ArrayList<>();
        Double sum;
        //OBTENER VALORES DEL RANKING
        for (int a = 0; a < alternativas.size(); a++) {
            sum = 0.0;
            if(!metodo_autovalor){
                for (int c = 0; c < criterios.size(); c++)
                    sum += v_pesos_norm_c_c.get(c) * matriz_pesos_norm_a_c.get(a).get(c);
            }else{
                for (int c = 0; c < criterios.size(); c++)
                    sum += v_pesos_norm_c_c.get(c) * matriz_pesos_norm_a_c.get(c).get(a);
            }
            ranking_alternativas.add(sum);
        }
        System.out.println(ranking_alternativas);
        
        //ORDENAR EL RANKING --> AL SER POCAS ALTERNATIVAS HACEMOS MÉTODO BURBUJA (n^2)
        Double max_valor;
        int pos;
        for (int a = 0; a < ranking_alternativas.size(); a++) { 
            max_valor = -1.0;
            pos = -1; 
            for (int i = 0; i < ranking_alternativas.size(); i++) {
                if (ranking_alternativas.get(i) > max_valor){
                    max_valor = ranking_alternativas.get(i);
                    pos = i;
                }  
            }
            this.ranking_alternativas.add(alternativas.get(pos));
            ranking_alternativas.set(pos, -1.0); //ANULO EL VALOR DE RANKING DE LA ALTERNATIVA QUE SE ACABA DE ESCOGER.
        }
        
        System.out.println(this.ranking_alternativas);
        
    }
    
    public ArrayList<String> getRanking_alternativas() {
        return ranking_alternativas;
    }

    
}
